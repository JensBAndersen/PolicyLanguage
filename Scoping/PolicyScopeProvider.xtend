/*
 * generated by Xtext 2.16.0
 */
package com.ffu.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import com.ffu.policy.EntityProperty
import com.ffu.policy.PolicyPackage.Literals
import com.ffu.policy.Domain
import com.ffu.policy.Property
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import com.ffu.policy.EntityPropertyRef
import java.util.ArrayList
import com.ffu.policy.Entity
import com.ffu.policy.EntityRef
import com.ffu.policy.QueryParam
import com.ffu.policy.QueryParamRef

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
 
 
class PolicyScopeProvider extends AbstractPolicyScopeProvider {
	override getScope(EObject context, EReference reference){
		
		if(context instanceof EntityPropertyRef && reference==Literals.ENTITY_PROPERTY_REF__PROPERTY_REF) { 
			
			val container = context.eContainer
			
			switch (container) {
				EntityProperty: {
					return Scopes.scopeFor(container.entity.properties)
				}
				EntityPropertyRef:{
					var root =  EcoreUtil2.getRootContainer(container);
					var allProperties = EcoreUtil2.getAllContentsOfType(root, Property)
					
					for(property: allProperties){
						if(property.identityEquals(container.propertyRef)){
							var type = property.type
							switch(type){
								EntityRef: {
									return Scopes.scopeFor(type.ref.properties)
								}
								default: println("default 1")
							}
						}
					}
				}
			 	default: println("default 2")
			}	
		}
		
//		Hvis FQN virker behøver jeg ikke selv at lave scope
//		if(context instanceof QueryParamRef && reference==Literals.QUERY_PARAM_REF__REF) {
//			println(context.eContainer)
//			println(context.eContainer.eContainer)
//			println(context.eContainer.eContainer.eContainer)
//			
//			var domain = EcoreUtil2.getContainerOfType(context,Domain)
//			var queryParams = EcoreUtil2.getAllContentsOfType(domain, QueryParam)
//
//			var candidates = new ArrayList<QueryParam>
//
//			candidates.addAll(queryParams)
//
//			return Scopes.scopeFor(candidates)
//		}
		
//		### Save for easy copy 

//		if(context instanceof EntityProperty && reference==Literals.ENTITY_PROPERTY__PROPERTY) {
//			println(context.eContainer)
//			
//			var domain = EcoreUtil2.getContainerOfType(context,Domain)
//
//			var candidates = new ArrayList<Property>
//
//			for(entity : domain.entities){
//				candidates.addAll(entity.properties.filter(Property))
//			}
//
//			return Scopes.scopeFor(candidates)
//		}
//		
		return super.getScope(context, reference)
	}
}	


